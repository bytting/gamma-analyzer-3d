//  gamma-analyzer-3d - 3d visualization of sessions generated by gamma-analyzer
//  Copyright (C) 2017  Dag Robole
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <http://www.gnu.org/licenses/>.

#include "gamman3d.h"
#include "ui_gamman3d.h"
#include <cmath>

#define PI 3.14159

using namespace QtDataVisualization;

gamman3d::gamman3d(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::gamman3d)
{
    ui->setupUi(this);    
}

gamman3d::~gamman3d()
{
    session->clear();
    delete ui;
}

bool gamman3d::initialize()
{
    //setGeometry(0, 0, 800, 600);

    session = new Session();
    session->load("C:\\crash-sessions\\Ã¸velse-NORDUM-06.09.2016\\06092016_155236");

    scatter = new Q3DScatter();
    scatter->scene()->activeCamera()->setCameraPreset(Q3DCamera::CameraPresetDirectlyAbove);
    scatter->setShadowQuality(QAbstract3DGraph::ShadowQualityNone);

    QScatterDataProxy *proxy = new QScatterDataProxy();
    QScatter3DSeries *series = new QScatter3DSeries(proxy);
    scatter->addSeries(series);

    QScatterDataArray *dataArray = new QScatterDataArray();
    dataArray->resize(session->SpectrumCount());
    QScatterDataItem *p = &dataArray->first();

    for(const Spectrum* spec : session->getSpectrums())
    {
        double cosLat = std::cos(spec->latitudeStart * PI / 180.0);
        double sinLat = std::sin(spec->latitudeStart * PI / 180.0);
        double cosLon = std::cos(spec->longitudeStart * PI / 180.0);
        double sinLon = std::sin(spec->longitudeStart * PI / 180.0);
        double rad = 500.0;
        double x = rad * cosLat * cosLon;
        double y = rad * cosLat * sinLon;
        double z = rad * sinLat;
        p->setPosition(QVector3D(x, y, z));
        p++;
    }

    series->dataProxy()->resetArray(dataArray);
    series->setItemSize(0.15);
    series->setMeshSmooth(true);

    QWidget *container = QWidget::createWindowContainer(scatter);
    setCentralWidget(container);
    scatter->show();

    return true;
}
