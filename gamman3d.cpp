//  gamma-analyzer-3d - 3d visualization of sessions generated by gamma-analyzer
//  Copyright (C) 2017  Dag Robole
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <http://www.gnu.org/licenses/>.

#include "gamman3d.h"
#include "ui_gamman3d.h"
#include "geo.h"
#include <QMessageBox>
#include <QFileDialog>
#include <QHBoxLayout>
#include <QVBoxLayout>
#include <QToolBar>
#include <QAction>
#include <QIcon>
#include <QPushButton>

using namespace QtDataVisualization;

gamman3d::gamman3d(QWidget *parent) :
    QMainWindow(parent),    
    ui(std::make_unique<Ui::gamman3d>()),
    session(std::make_unique<gamma::Session>())
{
    ui->setupUi(this);    

    setupMenu();
    setupToolbar();
    setupStatus();
    setupControls();
    setupScene();
}

gamman3d::~gamman3d()
{    
}

void gamman3d::setupMenu()
{
    QMenu *fileMenu = ui->menuBar->addMenu(tr("&File"));

    QAction *openAction = new QAction(
                QIcon(":/res/images/open-32.png"),
                tr("&Open session"),
                this);
    openAction->setStatusTip(tr("Open a session"));    
    connect(openAction, &QAction::triggered,
            this, &gamman3d::openSession);
    fileMenu->addAction(openAction);

    QAction *closeAction = new QAction(
                QIcon(":/res/images/close-32.png"),
                tr("&Close session"),
                this);
    closeAction->setStatusTip(tr("Close current session"));
    connect(closeAction, &QAction::triggered,
            this, &gamman3d::closeSession);
    fileMenu->addAction(closeAction);

    fileMenu->addSeparator();

    QAction *exitAction = new QAction(
                QIcon(":/res/images/exit-32.png"),
                tr("E&xit"),
                this);
    exitAction->setShortcuts(QKeySequence::Quit);
    exitAction->setStatusTip(tr("Exit the application"));
    connect(exitAction, &QAction::triggered,
            this, &QWidget::close);
    fileMenu->addAction(exitAction);
}

void gamman3d::setupToolbar()
{        
    ui->toolBar->setMovable(false);

    QAction *openToolAction = ui->toolBar->addAction(
                QIcon(":/res/images/open-32.png"),
                tr("&Open session"));

    connect(openToolAction, &QAction::triggered,
            this, &gamman3d::openSession);

    QAction *closeToolAction = ui->toolBar->addAction(
                QIcon(":/res/images/close-32.png"),
                tr("&Close current session"));

    connect(closeToolAction, &QAction::triggered,
            this, &gamman3d::closeSession);
}

void gamman3d::setupStatus()
{
    statusLabel = new QLabel(this);
    ui->statusBar->addPermanentWidget(statusLabel);
}

void gamman3d::setupControls()
{
    setWindowTitle(applicationName);
    setWindowIcon(QIcon(":/res/images/crash.ico"));
    setMinimumSize(640, 480);

    scatter = new Q3DScatter();

    QWidget *container = QWidget::createWindowContainer(scatter);
    QWidget *widget = new QWidget;
    QHBoxLayout *hbox = new QHBoxLayout(widget);
    hbox->setMargin(0);
    QVBoxLayout *vbox = new QVBoxLayout();
    vbox->setMargin(5);

    hbox->addWidget(container, 1);
    hbox->addLayout(vbox);

    QLabel *lblSceneTheme = new QLabel("Theme");
    vbox->addWidget(lblSceneTheme);

    cboxSceneTheme = new QComboBox();
    cboxSceneTheme->addItem("Army Blue");
    cboxSceneTheme->addItem("Digia");
    cboxSceneTheme->addItem("Ebony");
    cboxSceneTheme->addItem("Primary Colors");
    cboxSceneTheme->addItem("Qt");
    cboxSceneTheme->addItem("Retro");
    cboxSceneTheme->addItem("Stone Moss");
    cboxSceneTheme->setCurrentText("Qt");
    cboxSceneTheme->setEditable(false);
    connect(cboxSceneTheme,
            static_cast<void(QComboBox::*)(int)>(&QComboBox::currentIndexChanged),
            this, &gamman3d::changeSceneTheme);
    vbox->addWidget(cboxSceneTheme);

    QLabel *lblSceneNodeSize = new QLabel("Node size");
    vbox->addWidget(lblSceneNodeSize);

    slSceneNodeSize = new QSlider(Qt::Orientation::Horizontal);
    slSceneNodeSize->setMinimumSize(200, 0);
    slSceneNodeSize->setTickInterval(1);
    slSceneNodeSize->setMinimum(1);
    slSceneNodeSize->setMaximum(20);
    slSceneNodeSize->setValue(2);
    connect(slSceneNodeSize, &QSlider::valueChanged,
            this, &gamman3d::resizeSceneNode);
    vbox->addWidget(slSceneNodeSize);

    vbox->addStretch(1);

    setCentralWidget(widget);
    scatter->show();
}

void gamman3d::setupScene()
{    
    scatter->scene()->activeCamera()->setCameraPreset(
                Q3DCamera::CameraPresetFront);
    scatter->setShadowQuality(
                QAbstract3DGraph::ShadowQualityNone);
    scatter->activeTheme()->setType(Q3DTheme::ThemeQt);

    QScatterDataProxy *proxy = new QScatterDataProxy();
    series = new QScatter3DSeries(proxy);
    series->setItemSize(0.1);
    series->setMeshSmooth(true);
    scatter->addSeries(series);

    dataArray = new QScatterDataArray();
}

void gamman3d::openSession()
{
    using namespace gamma;

    QString dir = QFileDialog::getExistingDirectory(
                this,
                tr("Open session directory"),
                "",
                QFileDialog::ShowDirsOnly |
                QFileDialog::DontResolveSymlinks);

    try
    {
        session->clear();
        switch(session->load(dir))
        {
        case Session::LoadResult::DirDoesNotExist:
            QMessageBox::information(
                        this, tr("Information"),
                        "Directory does not exist");
            return;

        case Session::LoadResult::DirNotASession:
            QMessageBox::information(
                        this, tr("Information"),
                        "Directory does not appear to be a valid session");
            return;

        case Session::LoadResult::InvalidSpectrumFound:
            QMessageBox::information(
                        this, tr("Information"),
                        "Session contains invalid spectrums");
        }

        populateScene();
        statusLabel->setText("Session: " + dir);
    }
    catch(std::exception &e)
    {
        QMessageBox::warning(this, tr("Error"), e.what());
        return;
    }
}

void gamman3d::closeSession()
{
    session->clear();
    dataArray->clear();
    series->dataProxy()->resetArray(dataArray);
    statusLabel->setText("");
}

void gamman3d::populateScene()
{        
    dataArray->clear();
    dataArray->resize(session->SpectrumCount());
    QScatterDataItem *p = &dataArray->first();

    double minAltitude = session->getMinAltitude();
    double focalDistance = 200.0;    

    double x, y, z, projectedX, projectedY, fakeAltitude;

    for(const auto& spec : session->getSpectrums())
    {        
        geo::geodeticToCartesianSimplified(
                    spec->latitudeStart,
                    spec->longitudeStart,
                    x, y, z);

        /*geo::geodeticToCartesian(
                    spec->latitudeStart,
                    spec->longitudeStart,
                    x, y, z);*/

        projectedX = x * focalDistance / (focalDistance + z);
        projectedY = y * focalDistance / (focalDistance + z);

        fakeAltitude = (spec->altitudeStart - minAltitude) / 100000.0;

        p->setPosition(QVector3D(projectedX, projectedY, -fakeAltitude));
        p++;
    }

    series->dataProxy()->resetArray(dataArray);        
}

void gamman3d::resizeSceneNode(int val)
{
    double size = (double)val / 20.0;
    series->setItemSize(size);
}

void gamman3d::changeSceneTheme(int idx)
{
    QString themeName = cboxSceneTheme->itemText(idx);
    if(themeName == "Army Blue")
        scatter->activeTheme()->setType(Q3DTheme::ThemeArmyBlue);
    else if(themeName == "Digia")
        scatter->activeTheme()->setType(Q3DTheme::ThemeDigia);
    else if(themeName == "Ebony")
        scatter->activeTheme()->setType(Q3DTheme::ThemeEbony);
    else if(themeName == "Isabelle")
        scatter->activeTheme()->setType(Q3DTheme::ThemeIsabelle);
    else if(themeName == "Primary Colors")
        scatter->activeTheme()->setType(Q3DTheme::ThemePrimaryColors);
    else if(themeName == "Qt")
        scatter->activeTheme()->setType(Q3DTheme::ThemeQt);
    else if(themeName == "Retro")
        scatter->activeTheme()->setType(Q3DTheme::ThemeRetro);
    else if(themeName == "Stone Moss")
        scatter->activeTheme()->setType(Q3DTheme::ThemeStoneMoss);
}
