//  gamma-analyzer-3d - 3d visualization of sessions generated by gamma-analyzer
//  Copyright (C) 2017  Dag Robole
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <http://www.gnu.org/licenses/>.

#include "gamman3d.h"
#include "ui_gamman3d.h"
#include "exceptions.h"
#include "colorspectrum.h"
#include "spectrumentity.h"
#include <QMessageBox>
#include <QFileDialog>
#include <QIcon>
#include <QDebug>
#include <Qt3DExtras/QForwardRenderer>

gamman3d::gamman3d(QWidget *parent)
    : QMainWindow(parent),
      ui(new Ui::gamman3d),
      mSession(new Gamma::Session())
{
    ui->setupUi(this);
    setupWidgets();
    setupScene();
    setupSignals();
}

gamman3d::~gamman3d()
{    
    delete mSession;
    delete ui;
}

void gamman3d::setupWidgets()
{
    mLabelStatus = new QLabel(ui->status);
    statusBar()->addWidget(mLabelStatus);
}

void gamman3d::setupSignals()
{
    QObject::connect(ui->actionOpenSession,
                     &QAction::triggered,
                     this,
                     &gamman3d::onOpenSession);

    QObject::connect(ui->actionCloseSession,
                     &QAction::triggered,
                     this,
                     &gamman3d::onCloseSession);

    QObject::connect(ui->actionExit,
                     &QAction::triggered,
                     this,
                     &gamman3d::onExitApplication);

    QObject::connect(ui->actionShowScene,
                     &QAction::triggered,
                     this,
                     &gamman3d::onShowScene);

    QObject::connect(ui->actionShowSettings,
                     &QAction::triggered,
                     this,
                     &gamman3d::onShowSettings);

    QObject::connect(ui->actionLoadDoserateScript,
                     &QAction::triggered,
                     this,
                     &gamman3d::onSetScript);
}

void gamman3d::setupScene()
{
    mView = new Qt3DExtras::Qt3DWindow();
    mContainerScene = QWidget::createWindowContainer(mView, this);
    ui->layoutScene->addWidget(mContainerScene);

    mView->defaultFrameGraph()->setClearColor(QColor(32, 32, 32));

    mCamera = mView->camera();
    mCamera->setProjectionType(Qt3DRender::QCameraLens::PerspectiveProjection);
    mCamera->lens()->setPerspectiveProjection(45.0, mView->width() / mView->height(), 0.1, 10000.0);
    mCamera->setUpVector(QVector3D(0.0f, 1.0f, 0.0f));
    mCamera->setPosition(QVector3D(0.0f, 20.0f, 80.0f));
    mCamera->setViewCenter(QVector3D(0.0f, 0.0f, 0.0f));

    mSceneEntity = new Qt3DCore::QEntity();

    mCameraController = new Qt3DExtras::QOrbitCameraController(mSceneEntity);
    mCameraController->setLinearSpeed(50.0f);
    mCameraController->setLookSpeed(180.0f);
    mCameraController->setCamera(mCamera);

    new GridEntity(mSceneEntity, 10, 10.0f);

    mView->setRootEntity(mSceneEntity);
    mView->show();
}

void gamman3d::populateScene()
{
    // FIXME: clear scene    

    Gamma::ColorSpectrum colorSpectrum(mSession->minDoserate(),
                                       mSession->maxDoserate());

    double halfX = (mSession->maxX() - mSession->minX()) / 2.0;
    double halfY = (mSession->maxY() - mSession->minY()) / 2.0;

    for(const auto& spec : mSession->getSpectrumList())
    {
        QVector3D position((spec->x1() - mSession->minX() - halfX) * 10000.0,
                           spec->altitudeStart() - mSession->minAltitude(),
                           (spec->y1() - mSession->minY() - halfY) * -10000.0);

        //qDebug() << "x: " << position.x() << "y: " << position.y() << "z: " << position.z();        

        SpectrumEntity *entity = new SpectrumEntity(
                    mSceneEntity,
                    position,
                    colorSpectrum.colorFromValue(spec->doserate()));

        entity->setObjectName(QStringLiteral("entity ") + QString::number(spec->sessionIndex()));

        Qt3DRender::QObjectPicker *picker = new Qt3DRender::QObjectPicker(entity);
        picker->setHoverEnabled(false);
        picker->setEnabled(true);
        QObject::connect(picker, &Qt3DRender::QObjectPicker::pressed,
                         this, &gamman3d::onPicked);
        entity->addComponent(picker);
    }    

    mCamera->setUpVector(QVector3D(0.0f, 1.0f, 0.0f));
    mCamera->setPosition(QVector3D(0.0f, 20.0f, 80.0f));
    mCamera->setViewCenter(QVector3D(0.0f, 0.0f, 0.0f));
}

void gamman3d::onExitApplication()
{    
    QWidget::close();
}

void gamman3d::onOpenSession()
{
    try
    {
        QString sessionDir = QFileDialog::getExistingDirectory(
                    this,
                    tr("Open session directory"),
                    QDir::homePath(),
                    QFileDialog::ShowDirsOnly |
                    QFileDialog::DontResolveSymlinks);
        if(sessionDir.isEmpty())
            return;

        sessionDir = QDir::toNativeSeparators(sessionDir);

        mSession->loadPath(sessionDir);

        populateScene();

        mLabelStatus->setText(QStringLiteral("Session: ") + sessionDir);
    }
    catch(const GammanException& e)
    {
        qDebug() << e.what();
        QMessageBox::warning(this, tr("Warning"), e.what());
    }
    catch(const std::exception& e)
    {
        qDebug() << e.what();
        QMessageBox::critical(this, tr("Error"), e.what());
    }
}

void gamman3d::onCloseSession()
{
    try
    {
        //mSession->clear(); // FIXME
        mLabelStatus->setText("");
    }
    catch(const std::exception& e)
    {
        qDebug() << e.what();
    }
}

void gamman3d::onShowScene()
{
    try
    {
        ui->pages->setCurrentWidget(ui->pageScene);
    }
    catch(const std::exception& e)
    {
        qDebug() << e.what();
    }
}

void gamman3d::onShowSettings()
{
    try
    {
        ui->pages->setCurrentWidget(ui->pageSettings);
    }
    catch(const std::exception& e)
    {
        qDebug() << e.what();
    }
}

void gamman3d::onSetScript()
{
    try
    {
        QString scriptFileName = QFileDialog::getOpenFileName(
                    this,
                    tr("Load doserate script"),
                    QDir::homePath(),
                    tr("Lua script (*.lua)"));

        scriptFileName = QDir::toNativeSeparators(scriptFileName);

        if(QFile::exists(scriptFileName))
        {
            mSession->loadDoserateScript(scriptFileName);
        }
    }
    catch(const std::exception& e)
    {
        qDebug() << e.what();
    }
}

void gamman3d::onPicked(Qt3DRender::QPickEvent *evt)
{
    Qt3DCore::QEntity *entity = qobject_cast<Qt3DCore::QEntity*>(sender()->parent());

    qDebug() << "Picked " << entity->objectName();    
}
