//  gamma-analyzer-3d - 3d visualization of sessions generated by gamma-analyzer
//  Copyright (C) 2017  Dag Robole
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <http://www.gnu.org/licenses/>.

#include "gamman3d.h"
#include "ui_gamman3d.h"
#include "geo.h"
#include <QMessageBox>
#include <QFileDialog>
#include <QHBoxLayout>
#include <QVBoxLayout>
#include <QDockWidget>
#include <QToolBar>
#include <QStatusBar>
#include <QAction>
#include <QIcon>
#include <QPushButton>

using namespace QtDataVisualization;

gamman3d::gamman3d(QWidget *parent) :
    QMainWindow(parent),    
    ui(new Ui::gamman3d),
    session(std::make_unique<gamma::Session>())
{
    ui->setupUi(this);    

    setupMenu();    
    setupStatus();
    setupTools();
    setupScene();
}

gamman3d::~gamman3d()
{    
    delete ui;
}

void gamman3d::setupMenu()
{    
    QObject::connect(ui->actionOpenSession, &QAction::triggered,
            this, &gamman3d::openSession);

    QObject::connect(ui->actionCloseSession, &QAction::triggered,
            this, &gamman3d::closeSession);        

    QObject::connect(ui->actionExit, &QAction::triggered,
            this, &QWidget::close);    
}

void gamman3d::setupStatus()
{    
    QStatusBar* status = ui->statusBar;

    labelStatus = new QLabel(this);        
    status->addPermanentWidget(labelStatus, 1);

    progressBar = new QProgressBar(this);
    progressBar->setMinimumWidth(200);
    progressBar->setTextVisible(false);
    progressBar->setVisible(false);
    status->addPermanentWidget(progressBar);
}

void gamman3d::setupTools()
{
    setWindowIcon(QIcon(QStringLiteral(":/res/images/crash.ico")));        

    ui->comboScatterTheme->addItem(QStringLiteral("Qt"));
    ui->comboScatterTheme->addItem(QStringLiteral("Primary Colors"));
    ui->comboScatterTheme->addItem(QStringLiteral("Digia"));
    ui->comboScatterTheme->addItem(QStringLiteral("Stone Moss"));
    ui->comboScatterTheme->addItem(QStringLiteral("Army Blue"));
    ui->comboScatterTheme->addItem(QStringLiteral("Retro"));
    ui->comboScatterTheme->addItem(QStringLiteral("Ebony"));
    ui->comboScatterTheme->addItem(QStringLiteral("Isabelle"));
    ui->comboScatterTheme->setCurrentIndex(0);

    QObject::connect(ui->comboScatterTheme, SIGNAL(currentIndexChanged(int)),
            this, SLOT(changeSceneTheme(int)));

    QObject::connect(ui->sliderScatterNodeSize, &QSlider::valueChanged,
            this, &gamman3d::resizeSceneNode);
}

void gamman3d::setupScene()
{    
    scatter = new Q3DScatter();
    QWidget *widgetScene = QWidget::createWindowContainer(scatter);
    widgetScene->setContentsMargins(0, 0, 0, 0);
    widgetScene->sizePolicy().setHorizontalStretch(1);
    widgetScene->sizePolicy().setVerticalStretch(1);
    ui->layoutScatter->addWidget(widgetScene, 1);

    scatter->scene()->activeCamera()->setCameraPreset(
                Q3DCamera::CameraPresetFront);
    scatter->setShadowQuality(
                QAbstract3DGraph::ShadowQualityNone);
    scatter->activeTheme()->setType(Q3DTheme::ThemeQt);
    scatter->show();

    QScatterDataProxy *proxy = new QScatterDataProxy();
    scatterSeries = new QScatter3DSeries(proxy);
    scatterSeries->setItemSize(0.1);
    scatterSeries->setMeshSmooth(true);
    scatter->addSeries(scatterSeries);

    scatterData = new QScatterDataArray();
}

void gamman3d::openSession()
{
    using namespace gamma;

    QString dir = QDir::toNativeSeparators(QFileDialog::getExistingDirectory(
                this,
                tr("Open session directory"),
                QStringLiteral(""),
                QFileDialog::ShowDirsOnly |
                QFileDialog::DontResolveSymlinks));
    if(dir.isEmpty())
        return;

    try
    {
        session->clear();
        switch(session->load(dir))
        {
        case Session::LoadResult::DirDoesNotExist:
            QMessageBox::information(
                        this, tr("Information"),
                        QStringLiteral("Directory does not exist"));
            return;

        case Session::LoadResult::DirNotASession:
            QMessageBox::information(
                        this, tr("Information"),
                        QStringLiteral("Directory does not appear to be a valid session"));
            return;

        case Session::LoadResult::InvalidSpectrumFound:
            QMessageBox::information(
                        this, tr("Information"),
                        QStringLiteral("Session contains invalid spectrums"));
            break;

        default:
            break;
        }

        populateScene();
        labelStatus->setText(QStringLiteral("Session: ") + dir);        
    }
    catch(std::exception &e)
    {
        QMessageBox::warning(this, tr("Error"), e.what());
        return;
    }
}

void gamman3d::closeSession()
{
    session->clear();
    scatterData->clear();
    scatterSeries->dataProxy()->resetArray(scatterData);
    labelStatus->setText("");
}

void gamman3d::populateScene()
{        
    scatterData->clear();
    scatterData->resize(session->SpectrumCount());
    QScatterDataItem *p = &scatterData->first();

    double minAltitude = session->getMinAltitude();
    const double focalDistance = 200.0;

    double x, y, z, projectedX, projectedY, deltaAltitude;

    for(const auto& spec : session->getSpectrums())
    {        
        geo::geodeticToCartesianSimplified(
                    spec->latitudeStart,
                    spec->longitudeStart,
                    x, y, z);

        /*geo::geodeticToCartesian(
                    spec->latitudeStart,
                    spec->longitudeStart,
                    x, y, z);*/

        projectedX = x * focalDistance / (focalDistance + z);
        projectedY = y * focalDistance / (focalDistance + z);

        deltaAltitude = (spec->altitudeStart - minAltitude);

        p->setPosition(QVector3D(projectedX, deltaAltitude, projectedY));
        p++;
    }

    scatterSeries->dataProxy()->resetArray(scatterData);
}

void gamman3d::resizeSceneNode(int val)
{
    scatterSeries->setItemSize((double)val / 20.0);
}

void gamman3d::changeSceneTheme(int theme)
{
    scatter->activeTheme()->setType(Q3DTheme::Theme(theme));
}
