//  gamma-analyzer-3d - 3d visualization of sessions generated by gamma-analyzer
//  Copyright (C) 2017  Dag Robole
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <http://www.gnu.org/licenses/>.

#ifndef EXCEPTIONS_H
#define EXCEPTIONS_H

#include <stdexcept>
#include <QString>

struct GammanException : public std::runtime_error
{
    explicit GammanException(QString arg) noexcept
        : std::runtime_error(arg.toStdString()) {}
};

struct IndexOutOfBounds : public GammanException
{
    explicit IndexOutOfBounds(QString source) noexcept
        : GammanException("Index out of bounds: " + source) {}
};

struct NumericRangeError : public GammanException
{
    explicit NumericRangeError(QString source) noexcept
        : GammanException("Numeric range error: " + source) {}
};

struct DirDoesNotExist : public GammanException
{
    explicit DirDoesNotExist(QString dir) noexcept
        : GammanException("Directory does not exist: " + dir) {}
};

struct FileDoesNotExist : public GammanException
{
    explicit FileDoesNotExist(QString filename) noexcept
        : GammanException("File does not exist: " + filename) {}
};

struct UnableToLoadFile : public GammanException
{
    explicit UnableToLoadFile(QString filename) noexcept
        : GammanException("Unable to load file: " + filename) {}
};

struct MissingJsonValue : public GammanException
{
    explicit MissingJsonValue(QString source) noexcept
        : GammanException("Missing JSON value: " + source) {}
};

#endif // EXCEPTIONS_H
