//  gamma-analyzer-3d - 3d visualization of sessions generated by gamma-analyzer
//  Copyright (C) 2017  Dag Robole
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <http://www.gnu.org/licenses/>.

#include "geo.h"
#include <cmath>

namespace Geo
{

QVector3D geodeticToCartesianSimplified(
        double lat,
        double lon)
{
    QVector3D vec;
    auto cosLat = std::cos(degToRad<double>(lat));
    auto sinLat = std::sin(degToRad<double>(lat));
    auto cosLon = std::cos(degToRad<double>(lon));
    auto sinLon = std::sin(degToRad<double>(lon));
    const auto rad = 500.0;
    vec.setX(rad * cosLat * cosLon);
    vec.setY(rad * sinLat);
    vec.setZ(rad * cosLat * sinLon);
    return vec;
}

QVector3D geodeticToCartesian(
        double lat,
        double lon)
{
    QVector3D vec;
    auto cosLat = std::cos(degToRad<double>(lat));
    auto sinLat = std::sin(degToRad<double>(lat));
    auto cosLon = std::cos(degToRad<double>(lon));
    auto sinLon = std::sin(degToRad<double>(lon));
    const auto rad = 6378137.0;
    const auto f = 1.0 / 298.257224;
    const auto C = 1.0 / std::sqrt(
                cosLat * cosLat + (1 - f) * (1 - f) * sinLat * sinLat);
    const auto S = (1.0 - f) * (1.0 - f) * C;
    const auto h = 0.0;
    vec.setX((rad * C + h) * cosLat * cosLon);
    vec.setY((rad * S + h) * sinLat);
    vec.setZ((rad * C + h) * cosLat * sinLon);
    return vec;
}

} // namespace Geo
