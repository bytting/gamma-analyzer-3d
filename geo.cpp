//  gamma-analyzer-3d - 3d visualization of sessions generated by gamma-analyzer
//  Copyright (C) 2017  Dag Robole
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <http://www.gnu.org/licenses/>.

#include "geo.h"
#include <cmath>

namespace Geo
{

Coordinate::Coordinate()
    : QGeoCoordinate()
{
}

Coordinate::Coordinate(double latitude, double longitude)
    : QGeoCoordinate(latitude, longitude)
{
}

Coordinate::Coordinate(double latitude, double longitude, double altitude)
    : QGeoCoordinate(latitude, longitude, altitude)
{
}

Coordinate::Coordinate(const Coordinate& rhs)
    : QGeoCoordinate(rhs)
{
}

Coordinate::Coordinate(const QGeoCoordinate& rhs)
    : QGeoCoordinate(rhs)
{
}

void Coordinate::setCoordinates(double latitude, double longitude)
{
    setLatitude(latitude);
    setLongitude(longitude);
}

void Coordinate::setCoordinates(double latitude, double longitude, double altitude)
{
    setLatitude(latitude);
    setLongitude(longitude);
    setAltitude(altitude);
}

QVector3D Coordinate::toCartesian() const
{
    QVector3D vec;

    auto cosLat = std::cos(degToRad<double>(latitude()));
    auto sinLat = std::sin(degToRad<double>(latitude()));
    auto cosLon = std::cos(degToRad<double>(longitude()));
    auto sinLon = std::sin(degToRad<double>(longitude()));
    vec.setX(earth_radius<double> * cosLat * cosLon);
    vec.setY(earth_radius<double> * cosLat * sinLon);
    vec.setZ(earth_radius<double> * sinLat);

    return vec;
}

void Coordinate::parseCartesian(const QVector3D& position)
{
    //setLatitude(radToDeg<double>(std::acos(position.z() / earth_radius<double>)));
    //setLongitude(radToDeg<double>(std::atan2(position.y(), position.x())));
    setLatitude(radToDeg<double>(std::acos(position.y() / earth_radius<double>)));
    setLongitude(radToDeg<double>(std::atan2(position.y(), position.x())));
}

Coordinate Coordinate::fromCartesian(const QVector3D& position)
{
    Coordinate coord;
    coord.parseCartesian(position);
    return coord;
}

} // namespace Geo
