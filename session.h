//  gamma-analyzer-3d - 3d visualization of sessions generated by gamma-analyzer
//  Copyright (C) 2017  Dag Robole
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <http://www.gnu.org/licenses/>.

#ifndef SESSION_H
#define SESSION_H

#include "spectrum.h"
#include "exceptions.h"
#include "detectortype.h"
#include "detector.h"
#include <memory>
#include <vector>
#include <QString>
#include <QVector3D>

extern "C"
{
#include "lua/lua.h"
#include "lua/lualib.h"
#include "lua/lauxlib.h"
}

namespace Gamma
{

typedef std::vector<Spectrum*> SpecList;
typedef SpecList::size_type SpecListSize;

class Session
{
public:

    Session();
    ~Session();

    struct UnableToCreateLuaState : public GA::Exception
    {
        explicit UnableToCreateLuaState(QString source) noexcept
            : GA::Exception("Unable to create Lua state: " + source) {}
    };

    const SpecList& getSpectrumList() const;

    const Spectrum* getSpectrum(SpecListSize index) const;

    SpecListSize spectrumCount() const { return mSpecList.size(); }

    void loadPath(QString sessionPath);

    struct DirIsNotASession : public GA::Exception
    {
        explicit DirIsNotASession(QString dir) noexcept
            : GA::Exception("Directory is not a valid session: " + dir) {}
    };

    struct InvalidSessionFile : public GA::Exception
    {
        explicit InvalidSessionFile(QString filename) noexcept
            : GA::Exception("Invalid session file: " + filename) {}
    };

    void loadDoserateScript(QString scriptFileName);

    struct LoadDoserateScriptFailed : public GA::Exception
    {
        explicit LoadDoserateScriptFailed(QString filename) noexcept
            : GA::Exception("Loading doserate script failed: " + filename) {}
    };

    void clear();

    QString name() const { return mName; }

    double minDoserate() const { return mMinDoserate; }
    double maxDoserate() const { return mMaxDoserate; }

private:

    void loadSessionFile(QString sessionFile);

    QString mName;
    QString mComment;

    DetectorType mDetectorType;
    Detector mDetector;

    SpecList mSpecList;

    lua_State *L;
    bool mScriptLoaded;

    double mLivetime;
    int mIterations;
    double mMinDoserate, mMaxDoserate;
};

} // namespace Gamma

#endif // SESSION_H
