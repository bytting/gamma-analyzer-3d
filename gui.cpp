//  gamma-analyzer-3d - 3d visualization of sessions generated by gamma-analyzer
//  Copyright (C) 2017  Dag Robole
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <http://www.gnu.org/licenses/>.

#include "gui.h"
#include "gamman3d.h"
#include <QWidget>
#include <QMenuBar>
#include <QMenu>
#include <QToolBar>
#include <QStatusBar>
#include <QHBoxLayout>
#include <QVBoxLayout>
#include <QStackedWidget>
#include <QToolBox>
#include <QLabel>

Gui::Gui()
{
}

void Gui::setup(gamman3d* g)
{
    // === MAIN WINDOW ===
    g->setMinimumSize(640, 480);
    g->setWindowIcon(QIcon(QStringLiteral(":/res/images/crash.ico")));

    // === MAIN MENU ===
    QMenuBar* menu = new QMenuBar(g);
    g->setMenuBar(menu);
    QMenu* fileMenu = menu->addMenu("&File");

    actionOpenSession = fileMenu->addAction(
                QIcon(":/res/images/open-32.png"), "Open session");

    actionCloseSession = fileMenu->addAction(
                QIcon(":/res/images/close-32.png"), "Close session");

    fileMenu->addSeparator();

    actionExit = fileMenu->addAction(
                QIcon(":/res/images/exit-32.png"), "Exit");

    // === TOOL BAR ===
    QToolBar* tools = new QToolBar(g);
    g->addToolBar(tools);
    tools->addAction(actionOpenSession);
    tools->addAction(actionCloseSession);

    // === STATUS BAR ===
    QStatusBar* status = new QStatusBar(g);
    g->setStatusBar(status);

    labelStatus = new QLabel(status);
    status->addWidget(labelStatus);

    // === CENTRAL WIDGET ===
    QWidget* widget = new QWidget();
    g->setCentralWidget(widget);

    QHBoxLayout* widgetLayout = new QHBoxLayout(widget);
    widgetLayout->setContentsMargins(0, 0, 0, 0);

    // === STACKED WIDGET ===
    QStackedWidget* pages = new QStackedWidget(g);
    widgetLayout->addWidget(pages);

    QWidget* pageScatter = new QWidget(g);
    pageScatter->setLayout(new QHBoxLayout);
    pageScatter->layout()->setContentsMargins(0, 0, 0, 0);
    pages->addWidget(pageScatter);

    QWidget* pageSurface = new QWidget(g);
    pageSurface->setLayout(new QHBoxLayout());
    pageSurface->layout()->setContentsMargins(0, 0, 0, 0);
    pages->addWidget(pageSurface);

    // === SCATTER TOOLBOX ===
    QToolBox* toolsScatter = new QToolBox(pageScatter);
    toolsScatter->setMinimumWidth(200);
    toolsScatter->setMaximumWidth(200);
    pageScatter->layout()->addWidget(toolsScatter);

    QWidget* toolsScatterControls = new QWidget(toolsScatter);
    toolsScatterControls->setLayout(new QVBoxLayout());
    toolsScatterControls->layout()->setAlignment(Qt::AlignTop);
    toolsScatter->addItem(toolsScatterControls, "Controls");

    QWidget* toolsScatterSpectrum = new QWidget(toolsScatter);
    toolsScatterSpectrum->setLayout(new QVBoxLayout());
    toolsScatterSpectrum->layout()->setAlignment(Qt::AlignTop);
    toolsScatter->addItem(toolsScatterSpectrum, "Spectrum");

    QLabel* labelScatterTheme = new QLabel(
                QStringLiteral("Theme"),
                toolsScatterControls);
    toolsScatterControls->layout()->addWidget(labelScatterTheme);

    comboScatterTheme = new QComboBox(toolsScatterControls);
    comboScatterTheme->addItem(QStringLiteral("Qt"));
    comboScatterTheme->addItem(QStringLiteral("Primary Colors"));
    comboScatterTheme->addItem(QStringLiteral("Digia"));
    comboScatterTheme->addItem(QStringLiteral("Stone Moss"));
    comboScatterTheme->addItem(QStringLiteral("Army Blue"));
    comboScatterTheme->addItem(QStringLiteral("Retro"));
    comboScatterTheme->addItem(QStringLiteral("Ebony"));
    comboScatterTheme->addItem(QStringLiteral("Isabelle"));
    comboScatterTheme->setCurrentIndex(0);

    toolsScatterControls->layout()->addWidget(comboScatterTheme);

    QLabel* labelScatterNodeSize = new QLabel(
                QStringLiteral("Node size"),
                toolsScatterControls);
    toolsScatterControls->layout()->addWidget(labelScatterNodeSize);

    sliderScatterNodeSize = new QSlider(toolsScatterControls);
    sliderScatterNodeSize->setMinimum(1);
    sliderScatterNodeSize->setMaximum(20);
    sliderScatterNodeSize->setValue(2);
    sliderScatterNodeSize->setOrientation(Qt::Horizontal);
    toolsScatterControls->layout()->addWidget(sliderScatterNodeSize);

    pages->setCurrentWidget(pageScatter);

    // === SCENE ===
    using namespace QtDataVisualization;

    scatter = new Q3DScatter();
    QWidget *widgetScene = QWidget::createWindowContainer(scatter);
    widgetScene->setContentsMargins(0, 0, 0, 0);
    widgetScene->sizePolicy().setHorizontalStretch(1);
    widgetScene->sizePolicy().setVerticalStretch(1);
    pageScatter->layout()->addWidget(widgetScene);

    scatter->scene()->activeCamera()->setCameraPreset(
                Q3DCamera::CameraPresetFront);
    scatter->setShadowQuality(
                QAbstract3DGraph::ShadowQualityNone);
    scatter->activeTheme()->setType(Q3DTheme::ThemeQt);
    scatter->show();

    QScatterDataProxy *proxy = new QScatterDataProxy();
    scatterSeries = new QScatter3DSeries(proxy);
    scatterSeries->setItemSize(0.1);
    scatterSeries->setMeshSmooth(true);
    scatter->addSeries(scatterSeries);

    scatterData = new QScatterDataArray();
}
