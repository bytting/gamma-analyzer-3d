//  gamma-analyzer-3d - 3d visualization of sessions generated by gamma-analyzer
//  Copyright (C) 2017  Dag Robole
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <http://www.gnu.org/licenses/>.

#ifndef MEMUTILS_H
#define MEMUTILS_H

#include <new>

#if __cplusplus <= 199711L

    #define PREVENT_DYNAMIC_ALLOCATION \
        void* operator new (std::size_t size) throw (std::bad_alloc); \
        void* operator new (std::size_t size, const std::nothrow_t& nothrow_value) throw(); \
        void* operator new (std::size_t size, void* ptr) throw(); \
        void* operator new[] (std::size_t size) throw (std::bad_alloc); \
        void* operator new[] (std::size_t size, const std::nothrow_t& nothrow_value) throw(); \
        void* operator new[] (std::size_t size, void* ptr) throw(); \
        void operator delete (void* ptr) throw(); \
        void operator delete (void* ptr, const std::nothrow_t& nothrow_constant) throw(); \
        void operator delete (void* ptr, void* voidptr2) throw(); \
        void operator delete[] (void* ptr) throw(); \
        void operator delete[] (void* ptr, const std::nothrow_t& nothrow_constant) throw(); \
        void operator delete[] (void* ptr, void* voidptr2) throw();

#elif __cplusplus == 201103L

    #define PREVENT_DYNAMIC_ALLOCATION \
        void *operator new(std::size_t size) = delete; \
        void *operator new(std::size_t size, const std::nothrow_t &nothrow_value) noexcept = delete; \
        void *operator new(std::size_t size, void* ptr) noexcept = delete; \
        void *operator new[](std::size_t size) = delete; \
        void *operator new[](std::size_t size, const std::nothrow_t &nothrow_value) noexcept = delete; \
        void *operator new[](std::size_t size, void *ptr) noexcept = delete; \
        void operator delete(void *ptr) noexcept = delete; \
        void operator delete(void *ptr, const std::nothrow_t &nothrow_constant) noexcept = delete; \
        void operator delete(void *ptr, void *voidptr2) noexcept = delete; \
        void operator delete[](void *ptr) noexcept = delete; \
        void operator delete[](void *ptr, const std::nothrow_t &nothrow_constant) noexcept = delete; \
        void operator delete[](void *ptr, void* voidptr2) noexcept = delete;

#elif __cplusplus >= 201402L

    #define PREVENT_DYNAMIC_ALLOCATION \
        void *operator new(std::size_t size) = delete; \
        void *operator new(std::size_t size, const std::nothrow_t &nothrow_value) noexcept = delete; \
        void *operator new(std::size_t size, void* ptr) noexcept = delete; \
        void *operator new[](std::size_t size) = delete; \
        void *operator new[](std::size_t size, const std::nothrow_t &nothrow_value) noexcept = delete; \
        void *operator new[](std::size_t size, void *ptr) noexcept = delete; \
        void operator delete(void *ptr) noexcept = delete; \
        void operator delete(void *ptr, const std::nothrow_t &nothrow_constant) noexcept = delete; \
        void operator delete(void *ptr, void *voidptr2) noexcept = delete; \
        void operator delete(void *ptr, std::size_t size) noexcept = delete; \
        void operator delete(void *ptr, std::size_t size, const std::nothrow_t &nothrow_constant) noexcept = delete; \
        void operator delete[](void *ptr) noexcept = delete; \
        void operator delete[](void *ptr, const std::nothrow_t &nothrow_constant) noexcept = delete; \
        void operator delete[](void *ptr, void* voidptr2) noexcept = delete; \
        void operator delete[](void *ptr, std::size_t size) noexcept = delete; \
        void operator delete[](void *ptr, std::size_t size, const std::nothrow_t &nothrow_constant) noexcept = delete;

#else

    #error C++ compiler version not recognized

#endif

#endif // MEMUTILS_H
