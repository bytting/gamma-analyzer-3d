//  gamma-analyzer-3d - 3d visualization of sessions generated by gamma-analyzer
//  Copyright (C) 2017  Dag Robole
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <http://www.gnu.org/licenses/>.

#include "spectrumentity.h"
#include <Qt3DExtras/QPhongMaterial>
#include <cmath>

SpectrumEntity::SpectrumEntity(
        Qt3DCore::QNode *parent,
        const QVector3D &pos,
        double minDoserate,
        double maxDoserate,
        double doserate)
    : Qt3DCore::QEntity(new Qt3DCore::QEntity(parent)),
      mMesh(new Qt3DExtras::QSphereMesh(parent)),
      mTransform(new Qt3DCore::QTransform(parent))
{
    mMesh->setRadius(0.3f);
    addComponent(mMesh);

    mTransform->setTranslation(pos);
    addComponent(mTransform);

    QColor color = makeRainbowRGB(minDoserate,
                                  maxDoserate,
                                  doserate,
                                  true);

    Qt3DExtras::QPhongMaterial *spectrumMaterial =
            new Qt3DExtras::QPhongMaterial(parent);

    spectrumMaterial->setDiffuse(color);
    spectrumMaterial->setSpecular(color);
    spectrumMaterial->setAmbient(QColor(color.red() - color.red() / 6,
                           color.green() - color.green() / 6,
                           color.blue() - color.blue() / 6));
    spectrumMaterial->setShininess(5.0f);
    addComponent(spectrumMaterial);
}

SpectrumEntity::~SpectrumEntity()
{
}

Qt3DExtras::QSphereMesh* SpectrumEntity::mesh() const
{
    return mMesh;
}

QColor SpectrumEntity::makeRainbowRGB(double minDoserate,
                                double maxDoserate,
                                double doserate,
                                bool useNaturalLogarithm)
{
    QColor color;

    if(useNaturalLogarithm)
    {
        minDoserate = std::log(minDoserate);
        maxDoserate = std::log(maxDoserate);
        doserate = std::log(doserate);
    }

    double f = (doserate - minDoserate) / (maxDoserate - minDoserate);

    auto a = (1.0 - f) / 0.25;	// invert and group
    auto X = std::floor(a);	// the integer part
    auto Y = std::floor(255.0 * (a - X)); // the fractional part from 0 to 255

    switch((int)X)
    {
    case 0:
        color.setRgb(255, Y, 0);
        break;
    case 1:
        color.setRgb(255 - Y, 255, 0);
        break;
    case 2:
        color.setRgb(0, 255, Y);
        break;
    case 3:
        color.setRgb(0, 255 - Y, 255);
        break;
    case 4:
        color.setRgb(0, 0, 255);
        break;
    }

    return color;
}
