//  gamma-analyzer-3d - 3d visualization of sessions generated by gamma-analyzer
//  Copyright (C) 2017  Dag Robole
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <http://www.gnu.org/licenses/>.

#include "session.h"
#include <stdexcept>
#include <memory>
#include <QString>
#include <QDir>
#include <QFileInfo>

namespace gamma
{

Session::Session()
{
}

Session::~Session()
{
    try
    {
        clear();
    }
    catch(...) {}
}

const Spectrum* Session::getSpectrum(unsigned idx) const
{
    if(idx >= mSpecList.size())
        throw std::runtime_error("Session::getSpectrum: Index out of bounds");

    return mSpecList[idx];
}

const SpecList& Session::getSpectrums() const
{
    return mSpecList;
}

Session::LoadResult Session::load(QString sessionPath)
{
    Session::LoadResult res = Session::LoadResult::Success;

    QDir dir(sessionPath + QStringLiteral("/json"));

    if (!dir.exists())
        return Session::LoadResult::DirNotASession;

    if(!QFile::exists(sessionPath + QStringLiteral("/session.json")))
        return Session::LoadResult::DirNotASession;

    const auto entryInfoList = dir.entryInfoList(
                QDir::NoDotAndDotDot | QDir::Files);

    for(const QFileInfo &info : entryInfoList)
    {
        QString suffix = info.completeSuffix();
        if(suffix.toLower() == QStringLiteral("json"))
        {
            try
            {
                Spectrum* spec = new Spectrum(info.absoluteFilePath());
                mSpecList.push_back(spec);
            }
            catch(...)
            {
                res = Session::LoadResult::InvalidSpectrumFound;
            }
        }
    }

    return res;
}

void Session::clear()
{
    for(auto& spec : mSpecList)
        delete spec;

    mSpecList.clear();
}

} // namespace gamma
