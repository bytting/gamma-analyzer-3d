//  gamma-analyzer-3d - 3d visualization of sessions generated by gamma-analyzer
//  Copyright (C) 2017  Dag Robole
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <http://www.gnu.org/licenses/>.

#include "session.h"
#include <stdexcept>
#include <memory>
#include <QString>
#include <QDir>
#include <QFileInfo>
#include <QDebug>

namespace gamma
{

Session::Session()
{
}

Session::~Session()
{
    try
    {
        clear();
    }
    catch(const std::exception& e)
    {
        qDebug() << e.what();
    }
}

const Spectrum* Session::getSpectrum(SpecListSize index) const
{
    if(index >= mSpecList.size())
        throw IndexOutOfBounds("Session::getSpectrum");

    return mSpecList[index];
}

const SpecList& Session::getSpectrumList() const
{
    return mSpecList;
}

void Session::load(QString sessionPath)
{
    QDir sessionDir(sessionPath);
    if(!sessionDir.exists())
        throw DirDoesNotExist(sessionDir.absolutePath());

    QDir spectrumDir(sessionPath + QDir::separator() + QStringLiteral("json"));
    if (!spectrumDir.exists())
        throw DirIsNotASession(spectrumDir.absolutePath());

    if(!QFile::exists(sessionPath + QDir::separator() + QStringLiteral("session.json")))
        throw DirIsNotASession(sessionDir.absolutePath());

    clear();

    const auto entryInfoList = spectrumDir.entryInfoList(
                QStringList() << "*.json",
                QDir::NoDotAndDotDot | QDir::Files);

    for(const auto& info : entryInfoList)
    {
        try
        {
            auto spec = new Spectrum(info.absoluteFilePath());
            mSpecList.push_back(spec);
        }
        catch(const GammanException& e)
        {
            qDebug() << e.what();
        }
    }
}

void Session::clear()
{
    for(auto& spec: mSpecList)
        delete spec;

    mSpecList.clear();
}

} // namespace gamma
