//  gamma-analyzer-3d - 3d visualization of sessions generated by gamma-analyzer
//  Copyright (C) 2017  Dag Robole
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <http://www.gnu.org/licenses/>.

#include "session.h"
#include "geo.h"
#include <stdexcept>
#include <memory>
#include <cmath>
#include <algorithm>
#include <QString>
#include <QDir>
#include <QFile>
#include <QFileInfo>
#include <QJsonDocument>
#include <QJsonObject>
#include <QDebug>

namespace Gamma
{

Session::Session()
    :
      L(luaL_newstate()),
      mScriptLoaded(false),
      mLivetime(0.0),
      mIterations(0),
      mMinDoserate(0.0),
      mMaxDoserate(0.0)
{
    if(!L)
        throw UnableToCreateLuaState("Session::Session");
    luaL_openlibs(L);
}

Session::~Session()
{
    try
    {
        clear();
        lua_close(L);
    }
    catch(const std::exception& e)
    {
        qDebug() << e.what();
    }
}

const Spectrum* Session::getSpectrum(SpecListSize index) const
{
    if(index >= mSpecList.size())
        throw GA::IndexOutOfBounds("Session::getSpectrum");

    return mSpecList[index];
}

const SpecList& Session::getSpectrumList() const
{
    return mSpecList;
}

void Session::loadPath(QString sessionPath)
{
    const QDir sessionDir(sessionPath);
    if(!sessionDir.exists())
        throw GA::DirDoesNotExist(sessionDir.absolutePath());

    const QDir spectrumDir(sessionPath + QDir::separator() +
                     QStringLiteral("json"));
    if (!spectrumDir.exists())
        throw DirIsNotASession(spectrumDir.absolutePath());

    const auto sessionFile = sessionPath + QDir::separator() +
            QStringLiteral("session.json");
    if(!QFile::exists(sessionFile))
        throw DirIsNotASession(sessionDir.absolutePath());

    clear();

    loadSessionFile(sessionFile);

    const auto fileEntries = spectrumDir.entryInfoList(
                QStringList() << "*.json",
                QDir::NoDotAndDotDot | QDir::Files);

    double minX, maxX, minZ, maxZ, minAltitude;
    bool first = true;

    for(const auto& fileEntry : fileEntries)
    {
        try
        {
            auto spec = new Spectrum(fileEntry.absoluteFilePath());

            if(mScriptLoaded)
                spec->calculateDoserate(mDetector, L);

            if(first)
            {
                mMinDoserate = mMaxDoserate = spec->doserate();
                minX = maxX = spec->position.x();
                minZ = maxZ = spec->position.z();
                minAltitude = spec->coordinates.altitude();
                first = false;
            }
            else
            {
                if(spec->doserate() < mMinDoserate)
                    mMinDoserate = spec->doserate();
                if(spec->doserate() > mMaxDoserate)
                    mMaxDoserate = spec->doserate();

                if(minX > spec->position.x())
                    minX = spec->position.x();
                if(maxX < spec->position.x())
                    maxX = spec->position.x();

                if(minZ > spec->position.z())
                    minZ = spec->position.z();
                if(maxZ < spec->position.z())
                    maxZ = spec->position.z();

                if(minAltitude > spec->coordinates.altitude())
                    minAltitude = spec->coordinates.altitude();
            }

            mSpecList.push_back(spec);
        }
        catch(const GA::Exception& e)
        {
            qDebug() << e.what();
        }
    }

    // Transpose spectrum positions to origo and extend by a factor of 18000.
    // Use delta altitude as y-axis to position the spectrums above ground level.

    auto halfX = (maxX - minX) / 2.0;
    auto halfZ = (maxZ - minZ) / 2.0;

    for(Spectrum *spec : mSpecList)
    {
        spec->position.setX((spec->position.x() - minX - halfX) * 18000.0);
        spec->position.setY(spec->coordinates.altitude() - minAltitude);
        spec->position.setZ((spec->position.z() - minZ - halfZ) * -18000.0);
    }
}

void Session::loadSessionFile(QString sessionFile)
{
    QFile jsonFile(sessionFile);
    if(!jsonFile.open(QFile::ReadOnly))
        throw GA::UnableToLoadFile(sessionFile);

    auto doc = QJsonDocument().fromJson(jsonFile.readAll());
    if(!doc.isObject())
        throw InvalidSessionFile(sessionFile);

    auto root = doc.object();

    if(!root.contains("Name"))
        throw GA::MissingJsonValue("Session:Name");
    mName = root.value("Name").toString();

    if(!root.contains("Comment"))
        throw GA::MissingJsonValue("Session:Comment");
    mComment = root.value("Comment").toString();

    if(!root.contains("Livetime"))
        throw GA::MissingJsonValue("Session:Livetime");
    mLivetime = root.value("Livetime").toInt();

    if(!root.contains("Iterations"))
        throw GA::MissingJsonValue("Session:Iterations");
    mIterations = root.value("Iterations").toInt();

    if(!root.contains("DetectorType"))
        throw GA::MissingJsonValue("Session:DetectorType");
    mDetectorType.loadJson(root.value("DetectorType").toObject());

    if(!root.contains("Detector"))
        throw GA::MissingJsonValue("Session:Detector");
    mDetector.loadJson(root.value("Detector").toObject());
}

void Session::loadDoserateScript(QString scriptFileName)
{
    if(luaL_dofile(L, scriptFileName.toStdString().c_str()))
        throw LoadDoserateScriptFailed(scriptFileName);
    mScriptLoaded = true;
}

void Session::clear()
{
    for(auto spec : mSpecList)
        delete spec;

    mSpecList.clear();

    mName = "";
    mIterations = 0;
    mLivetime = mMinDoserate = mMaxDoserate = 0.0;
}

} // namespace Gamma
