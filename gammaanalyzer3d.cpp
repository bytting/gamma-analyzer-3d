//  gamma-analyzer-3d - 3d visualization of sessions generated by gamma-analyzer
//  Copyright (C) 2017  Dag Robole
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <http://www.gnu.org/licenses/>.

#include "gammaanalyzer3d.h"
#include "ui_gammaanalyzer3d.h"
#include "colorspectrum.h"
#include "scene.h"
#include <QDir>
#include <QFileDialog>
#include <QAction>
#include <QLabel>
#include <QMessageBox>
#include <QDebug>
#include <QColor>
#include <QVector3D>
#include <Qt3DCore/QEntity>
#include <Qt3DRender/QCamera>
#include <Qt3DRender/QObjectPicker>

GammaAnalyzer3D::GammaAnalyzer3D(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::GammaAnalyzer3D)
{
    ui->setupUi(this);
    setupSignals();
}

GammaAnalyzer3D::~GammaAnalyzer3D()
{
    delete ui;
}

void GammaAnalyzer3D::setupSignals()
{
    QObject::connect(ui->actionExit, &QAction::triggered,
                     this, &GammaAnalyzer3D::onApplicationExit);

    QObject::connect(ui->actionLoadDoserateScript, &QAction::triggered,
                     this, &GammaAnalyzer3D::onLoadDoserateScript);

    QObject::connect(ui->actionOpenSession, &QAction::triggered,
                     this, &GammaAnalyzer3D::onOpenSession);
}

void GammaAnalyzer3D::onApplicationExit()
{
    try
    {
        for(Qt3DExtras::Qt3DWindow *win : windows)
        {
            win->destroy();
            delete win;
        }
        windows.clear();

        for(Gamma::Session* session : sessions)
            delete session;
        sessions.clear();

        QApplication::exit();
    }
    catch(const std::exception& e)
    {
        qDebug() << e.what();
    }
}

void GammaAnalyzer3D::onOpenSession()
{
    try
    {
        QString sessionDir = QFileDialog::getExistingDirectory(
                    this,
                    tr("Open session directory"),
                    QDir::homePath(),
                    QFileDialog::ShowDirsOnly |
                    QFileDialog::DontResolveSymlinks);
        if(sessionDir.isEmpty())
            return;

        sessionDir = QDir::toNativeSeparators(sessionDir);

        Gamma::Session *session = new Gamma::Session();
        if(QFile::exists(doserateScript))
            session->loadDoserateScript(doserateScript);
        session->loadPath(sessionDir);

        sessions.push_back(session);

        Qt3DExtras::Qt3DWindow *win = new Qt3DExtras::Qt3DWindow;
        win->setTitle(session->name());

        Qt3DCore::QEntity *scene = createScene(win);

        createGrid(10, 10.0, QColor(255, 255, 255), scene);

        Palette::ColorSpectrum colorSpectrum(session->minDoserate(),
                                             session->maxDoserate());

        double halfX = (session->maxX() - session->minX()) / 2.0;
        double halfY = (session->maxY() - session->minY()) / 2.0;

        for(const auto& spec : session->getSpectrumList())
        {
            QVector3D position((spec->x1() - session->minX() - halfX) * 20000.0,
                               spec->altitudeStart() - session->minAltitude(),
                               (spec->y1() - session->minY() - halfY) * -20000.0);

            Qt3DCore::QEntity *entity = createSpectrum(spec->sessionName() + " " + QString::number(spec->sessionIndex()),
                                                       position,
                                                       colorSpectrum.colorFromValue(spec->doserate()),
                                                       scene);

            Qt3DRender::QObjectPicker *picker = createPicker(entity);

            QObject::connect(picker, &Qt3DRender::QObjectPicker::pressed,
                             this, &GammaAnalyzer3D::onPicked);
        }

        win->camera()->setUpVector(QVector3D(0.0, 1.0, 0.0));
        win->camera()->setPosition(QVector3D(0, 20, 100.0f));
        win->camera()->setViewCenter(QVector3D(0, 0, 0));

        win->setRootEntity(scene);
        win->show();

        windows.push_back(win);
    }
    catch(const std::exception& e)
    {
        qDebug() << e.what();
    }
}

void GammaAnalyzer3D::onLoadDoserateScript()
{
    try
    {
        QString scriptFileName = QFileDialog::getOpenFileName(
                    this,
                    tr("Load doserate script"),
                    QDir::homePath(),
                    tr("Lua script (*.lua)"));

        doserateScript = QDir::toNativeSeparators(scriptFileName);
        ui->lblDoserateScript->setText("Loaded doserate script: " + doserateScript);
    }
    catch(const std::exception& e)
    {
        qDebug() << e.what();
    }
}

void GammaAnalyzer3D::onPicked(Qt3DRender::QPickEvent *evt)
{
    try
    {
        if(evt->button() != Qt3DRender::QPickEvent::LeftButton)
            return;

        Qt3DCore::QEntity *entity = qobject_cast<Qt3DCore::QEntity*>(sender()->parent());
        if(!entity)
            return;

        ui->lblSpectrum->setText("Selected spectrum: " + entity->objectName());
    }
    catch(const std::exception& e)
    {
        qDebug() << e.what();
    }
}
