//  gamma-analyzer-3d - 3d visualization of sessions generated by gamma-analyzer
//  Copyright (C) 2017  Dag Robole
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <http://www.gnu.org/licenses/>.

#include "selectionentity.h"
#include <QUrl>

SelectionEntity::SelectionEntity(
        const QVector3D &pos,
        const QColor &color,
        Qt3DCore::QEntity *parent)
    :
      Qt3DCore::QEntity(parent),
      mMesh(new Qt3DRender::QMesh(this)),
      mTransform(new Qt3DCore::QTransform(this)),
      mMaterial(new Qt3DExtras::QPhongMaterial(this)),
      mTarget(nullptr)
{
    mMesh->setSource(QUrl(QStringLiteral("qrc:/models/arrow.obj")));
    addComponent(mMesh);

    mTransform->setTranslation(pos);
    mTransform->setRotationZ(180.0);
    addComponent(mTransform);

    mMaterial->setDiffuse(color);
    mMaterial->setSpecular(QColor(20, 20, 20));
    QColor ambientColor(
                color.red() - color.red() / 10,
                color.green() - color.green() / 10,
                color.blue() - color.blue() / 10);
    mMaterial->setAmbient(ambientColor);
    mMaterial->setShininess(3.0f);
    addComponent(mMaterial);
}

SelectionEntity::~SelectionEntity()
{
    for(auto node : childNodes())
    {
        auto entity = qobject_cast<Qt3DCore::QEntity*>(node);
        if(entity)
        {
            entity->components().clear();
            entity->deleteLater();
        }
    }

    mMaterial->deleteLater();
    mTransform->deleteLater();
    mMesh->deleteLater();
    mTarget = nullptr;
}

void SelectionEntity::setTarget(SpectrumEntity *target)
{
    QVector3D pos(target->transform()->translation());
    pos.setY(pos.y() + 1.8);
    transform()->setTranslation(pos);
    setEnabled(true);
    mTarget = target;
}
