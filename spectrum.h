//  gamma-analyzer-3d - 3d visualization of sessions generated by gamma-analyzer
//  Copyright (C) 2017  Dag Robole
//
//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//
//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <http://www.gnu.org/licenses/>.

#ifndef SPECTRUM_H
#define SPECTRUM_H

#include "exceptions.h"
#include "detector.h"
#include <vector>
#include <QString>
#include <QDateTime>

extern "C"
{
#include <lua.h>
#include <lualib.h>
#include <lauxlib.h>
}

namespace gad
{

class Spectrum
{
public:

    typedef std::vector<int> ChanList;
    typedef ChanList::size_type ChanListSize;

    explicit Spectrum(QString filename);
    virtual ~Spectrum() {}

    bool isPreview() const { return mSessionPreview > 0; }

    QString sessionName() const { return mSessionName; }
    int sessionIndex() const { return mSessionIndex; }
    int sessionIterations() const { return mSessionIterations; }
    double sessionDelay() const { return mSessionDelay; }

    double latitudeStart() const { return mLatitudeStart; }
    double latitudeStartErr() const { return mLatitudeStartErr; }
    double latitudeEnd() const { return mLatitudeEnd; }
    double latitudeEndErr() const { return mLatitudeEndErr; }
    double longitudeStart() const { return mLongitudeStart; }
    double longitudeStartErr() const { return mLongitudeStartErr; }
    double longitudeEnd() const { return mLongitudeEnd; }
    double longitudeEndErr() const { return mLongitudeEndErr; }
    double altitudeStart() const { return mAltitudeStart; }
    double altitudeStartErr() const { return mAltitudeStartErr; }
    double altitudeEnd() const { return mAltitudeEnd; }
    double altitudeEndErr() const { return mAltitudeEndErr; }
    double gpsSpeedStart() const { return mGpsSpeedStart; }
    double gpsSpeedStartErr() const { return mGpsSpeedStartErr; }
    double gpsSpeedEnd() const { return mGpsSpeedEnd; }
    double gpsSpeedEndErr() const { return mGpsSpeedEndErr; }
    QDateTime gpsTimeStart() const { return mGpsTimeStart; }
    QDateTime gpsTimeEnd() const { return mGpsTimeEnd; }
    int realtime() const { return mRealtime; }
    int livetime() const { return mLivetime; }
    int totalCount() const { return mTotalCount; }

    ChanListSize numChannels() const { return mChannels.size(); }
    const ChanList& channels() const { return mChannels; }
    int channel(ChanListSize index) const;

    void calculateDoserate(const Detector &det, lua_State* L);
    double doserate() const { return mDoserate; }

    struct InvalidSpectrumFile : public GammanException
    {
        explicit InvalidSpectrumFile(QString filename) noexcept
            : GammanException("Invalid spectrum file: " + filename) {}
    };

private:

    void loadFile(QString filename);

    QString mSessionName;
    int mSessionIndex, mSessionIterations, mSessionPreview;
    double mSessionDelay, mLatitudeStart, mLatitudeStartErr;
    double mLatitudeEnd, mLatitudeEndErr;
    double mLongitudeStart, mLongitudeStartErr;
    double mLongitudeEnd, mLongitudeEndErr;
    double mAltitudeStart, mAltitudeStartErr;
    double mAltitudeEnd, mAltitudeEndErr;
    double mGpsSpeedStart, mGpsSpeedStartErr;
    double mGpsSpeedEnd, mGpsSpeedEndErr;
    QDateTime mGpsTimeStart, mGpsTimeEnd;
    int mRealtime, mLivetime, mTotalCount;
    ChanList mChannels;
    double mDoserate;
};

} // namespace gamma

#endif // SPECTRUM_H
